management:
  endpoint:
    health:
      show-details: always # 是否展示健康检查详情
  endpoints:
    web:
      exposure:
        include: '*' # 开放所有监控端点

server:
  port: 7000
spring:
  cloud:
    nacos:
      discovery:
        ip: 127.0.0.1
        server-addr: 127.0.0.1:8848
    gateway:
      globalcors:   # 统一配置跨域请求：现在的请求通过经过gateWay网关时，需要在网关统一配置跨域请求，需求所有请求通过
        cors-configurations:
          '[/**]':
            allowed-origins: "*"
            allowed-headers: "*"
            allow-credentials: true
            allowed-methods:
              - GET
              - POST
              - DELETE
              - PUT
              - OPTION
      discovery:
        locator:
          enabled: true       # 开启从注册中心动态创建路由的功能，利用微服务名进行路由,默认服务名转发 http://localhost:7000/spring-cloud-alibaba-provider/user
          lower-case-service-id: true
      default-filters:
#        （1）过滤器StripPrefix，作用是去掉请求路径的最前面n个部分截取掉。
#        StripPrefix=1就代表截取路径的个数为1，比如前端过来请求/test/good/1/view，匹配成功后，路由到后端的请求路径就会变成http://localhost:8888/good/1/view。
#        - StripPrefix=2     #2  两级路径转发
#        - RewritePath=/api/.*?/(?<remaining>.*), /$\{remaining}  # 1   通过规则定义匹配
      routes:
#        - predicates:                                     # 1
#            - Path=/api/acct/**                           # 1   http://localhost:7000/api/acct/user
#          uri: lb://spring-cloud-alibaba-provider         # 1

#        - predicates:                                     # 2
#            - Path=/api/acct/**                           # 2   http://localhost:7000/api/acct/user
#          uri: lb://spring-cloud-alibaba-provider         # 2

        - id: gate_route
          uri: https://www.baidu.com
          predicates:
            ## 当请求的路径为gate、rule开头的时，转发到https://www.baidu.com服务器上
            - Path=/gate/**,/rule/**
          ### 请求路径前加上/app
          filters:
            - PrefixPath=/app




  application:
    name: spring-cloud-gateway
#ribbon:
#  eager-load:
#    enabled: true # 开启Ribbon的饥饿加载模式，启动时创建 RibbonClient
#  MaxAutoRetries: 1 # 同一台实例的最大重试次数，但是不包括首次调用，默认为1次
#  MaxAutoRetriesNextServer: 2  # 重试负载均衡其他实例的最大重试次数，不包括首次调用，默认为0次
#  OkToRetryOnAllOperations: true  # 是否对所有操作都重试，默认false
#  ServerListRefreshInterval: 2000 # 从注册中心刷新服务器列表信息的时间间隔，默认为2000毫秒，即2秒
#  retryableStatusCodes: 400,401,403,404,500,502,504
#  NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RetryRule #配置规则 重试
#  ConnectTimeout: 3000  #连接建立的超时时长，默认1秒
#  ReadTimeout: 3000 #处理请求的超时时间，默认为1秒
#  MaxTotalConnections: 1000  # 最大连接数
#  MaxConnectionsPerHost: 1000  # 每个host最大连接数
#  restclient:
#    enabled: true
#hystrix:
#  threadpool:
#    default:
#      coreSize: 10 # 线程池核心线程数
#      maximumSize: 20  # 线程池最大线程数
#      allowMaximumSizeToDivergeFromCoreSize: true   # 线程池最大线程数是否有效
#      keepAliveTimeMinutes: 10  # 设置可空闲时间，单位分钟
#    demo-provider:
#      coreSize: 20   # 线程池核心线程数
#      maximumSize: 100   # 线程池最大线程数
#      allowMaximumSizeToDivergeFromCoreSize: true   # 线程池最大线程数是否有效
#      keepAliveTimeMinutes: 20  # 设置可空闲时间，单位分钟
#  propagate:
#    request-attribute:
#      enabled: true
#  command:
#    default:  #全局默认配置
#      execution:  #线程隔离相关配置
#        timeout:
#          enabled: true   #是否给方法执行设置超时时间，默认为true。一般我们不要改。
#        isolation:
#          strategy: THREAD    #配置请求隔离的方式，这里是默认的线程池方式。还有一种信号量的方式semaphore，使用比较少。
#          thread:
#            timeoutInMilliseconds: 100000  #方式执行的超时时间，默认为1000毫秒，在实际场景中需要根据情况设置
#            interruptOnTimeout: true   #发生超时时是否中断方法的执行，默认值为true。不要改。
#            interruptOnCancel: false  #是否在方法执行被取消时中断方法，默认值为false。没有实际意义，默认就好！
#      circuitBreaker:   #熔断器相关配置
#        enabled: true   #是否启动熔断器，默认为true，false表示不要引入 Hystrix。
#        requestVolumeThreshold: 20     #启用熔断器功能窗口时间内的最小请求数，假设我们设置的窗口时间为10秒，
#        sleepWindowInMilliseconds: 5000    #此配置的作用是指定熔断器打开后多长时间内允许一次请求尝试执行，官方默认配置为5秒。
#        errorThresholdPercentage: 50   #窗口时间内超过50%的请求失败后就会打开熔断器将后续请求快速失败掉,默认配置为50
#      metrics:
#        rollingStats:
#          timeInMilliseconds: 10000
#          numBuckets: 10

